{"version":3,"sources":["components/Cell.js","components/Grid.js","components/App.js","index.js"],"names":["Cell","color","1","0","inlineStyles","backgroundColor","props","value","width","columns","className","style","this","Component","Grid","initialState","cols","rows","grid","handleBoundsToggle","setState","bounds","state","makeGrid","bind","getNextGen","handleRestart","setupGrid","delayState","setTimeout","arr","Array","i","length","newGrid","j","Math","floor","random","next","neighbors","countNeighbors","x","y","res","row","map","key","uuid","cellVal","Fragment","onClick","type","name","checked","onChange","marginTop","renderGrid","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.251c3fa3.chunk.js","sourcesContent":["import React, {Component} from 'react'; \nimport './Cell.css';\n\nclass Cell extends Component {\n    color = {\n        1: 'white',\n        0: 'black'\n    }\n\n    inlineStyles = {\n        backgroundColor : this.color[this.props.value],\n        width : `calc(100%/${this.props.columns})`\n    }\n\n    render() {\n        return (\n            <div className=\"Cell\" style={this.inlineStyles}></div>\n        );\n    }\n}\n\nexport default Cell","import React, {Component} from 'react'; \nimport uuid from 'react-uuid'; \nimport Cell from './Cell'; \nimport './Grid.css'\n\nclass Grid extends Component {\n    initialState = {\n        cols: 20,\n        rows: 30,\n        grid: []\n    }\n    constructor(props) {\n        super(props);\n        this.state = {...this.initialState, bounds: true}; \n\n        this.makeGrid = this.makeGrid.bind(this); \n        this.getNextGen = this.getNextGen.bind(this); \n        this.handleRestart = this.handleRestart.bind(this); \n    }\n\n    componentDidMount() {\n        this.setState({grid: [...this.setupGrid()]});\n    }\n\n    componentDidUpdate() {\n        this.delayState();\n    }\n\n    delayState() {\n        setTimeout(() => {\n            this.getNextGen();\n        }, 300);\n    }\n\n    // function to create an empty 2D Array\n    makeGrid(cols, rows) {\n        let arr = new Array(cols); \n        for (let i= 0; i < arr.length; i++) {\n            arr[i] = new Array(rows); \n        }\n        return arr; \n    }\n\n    // function to setup 2D Array with actual values taken from state\n    setupGrid() {\n        const {cols, rows} = this.state; \n        let newGrid = this.makeGrid(cols, rows);\n        for(let i = 0; i < cols; i ++) {\n            for (let j = 0; j < rows; j++) {\n                newGrid[i][j] = Math.floor((Math.random() * 2)); \n            }\n        }\n        return newGrid; \n    }\n\n    getNextGen() {\n        const {cols, rows, grid, bounds} = this.state; \n        const next = this.makeGrid(cols,rows); \n        for(let i = 0; i < cols; i ++) {\n            for (let j = 0; j < rows; j++) {\n                let state = grid[i][j]; \n                //edges\n                if((i === 0 || i === cols -1 || j === 0 || j === rows - 1) && bounds) {\n                    next[i][j] = state;\n                }\n                else {\n                    //count live neighbors\n                    let neighbors = this.countNeighbors(grid, i, j); \n                    if(state === 0 && neighbors === 3) {\n                        next[i][j] = 1; \n                    } else if(state === 1 && (neighbors < 2 || neighbors > 3)) {\n                        next[i][j] = 0; \n                    } else {\n                        next[i][j] = state; \n                    }\n                }\n            }\n        }\n\n        this.setState({grid: [...next]})\n    }\n\n    countNeighbors(grid, x, y) {\n        let res = 0; \n        const {cols, rows} = this.state; \n        for (let i=-1; i < 2; i++) {\n            for(let j=-1; j < 2; j++) {\n                let col = (x + i + cols) % cols; \n                let row = (y + j + cols) % rows;\n                res += grid[col][row];\n            }\n        }\n        //dont count myself\n        res -= grid[x][y]; \n        return res; \n    }\n\n    renderGrid() {\n       const grid = this.state.grid;\n       return (\n           grid.map(row => {\n               return (\n                    <div className=\"row\" key={uuid()}>\n                       {row.map(cellVal => {\n                           return (\n                            <Cell key={uuid()} value={cellVal} columns={this.state.cols}/>\n                           );\n                       })}\n                   </div>\n               );\n           })\n       );\n    }\n    \n\n    handleRestart() {\n        this.setState({...this.initialState, bounds: this.state.bounds}); \n        this.setState({grid: [...this.setupGrid()]}); \n    }\n\n    handleBoundsToggle = () => {\n        this.setState({ bounds: !this.state.bounds });\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"Grid\">\n                    <div className=\"actions\">\n                        <button className=\"ui button primary\" onClick={this.handleRestart}>Restart</button>\n                        <div className=\"ui toggle checkbox\">\n                            <input type=\"checkbox\" name=\"public\" checked={this.state.bounds} onChange = {this.handleBoundsToggle}/>\n                            <label>Enable bounds</label>\n                        </div>\n                    </div>\n                    <div style={{marginTop: '20px'}}>{this.renderGrid()}</div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Grid; ","import React, {Component} from 'react'; \nimport Grid from './Grid'; \n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"ui container\" style={{marginTop: '20px'}}>\n                <Grid />\n            </div>\n        );\n    }\n}\n\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App'; \n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}